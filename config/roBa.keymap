#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define NUM 1
#define MOUSE 3
#define SCROLL 4

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W                 &kp E       &kp R         &kp T                                                  &kp Y      &kp U    &lt 4 I    &kp O    &kp P
&kp A             &lt 3 S               &lt 2 D     &lt 1 F       &kp G         &kp LS(LG(S))         &kp LEFT_BRACKET   &kp H      &lt 1 J  &lt 2 K    &lt 3 L  &kp BACKSPACE
&mt LEFT_SHIFT Z  &kp X                 &kp C       &kp V         &kp B         &kp TAB               &kp RIGHT_BRACKET  &kp N      &kp M    &kp COMMA  &kp DOT  &mt RIGHT_SHIFT COLON
&lt 4 LEFT_SHIFT  &kp LC(LEFT_COMMAND)  &kp ESCAPE  &kp LEFT_ALT  &kp LEFT_WIN  &kp LEFT_CONTROL      &kp ENTER          &kp SPACE                               &lt 5 SEMI
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        NUM {
            bindings = <
&kp HASH  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0                                                      &kp EQUAL         &kp PLUS           &kp MINUS  &kp ASTERISK   &kp PERCENT
&kp DLLR  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp EXCL         &kp LC(LA(KP_NUMBER_0))      &kp LEFT_PARENTHESIS   &kp TILDE         &kp CARET          &kp UNDER  &kp AMPERSAND  &kp PIPE
&trans    &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp QUESTION     &trans                       &kp RIGHT_PARENTHESIS  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp GRAVE  &kp AT         &kp SLASH
&trans    &trans           &trans           &trans           &trans           &trans                       &trans                 &trans                                                         &kp NON_US_BACKSLASH
            >;
        };

        ARROW {
            bindings = <
&trans          &kp LC(LS(TAB))         &trans  &kp LC(TAB)              &trans                      &kp LG(LEFT_ARROW)  &kp LG(DOWN)    &kp LG(UP_ARROW)  &kp RG(RIGHT)  &trans
&trans          &trans                  &trans  &trans                   &trans  &trans      &trans  &kp LEFT            &kp DOWN_ARROW  &kp UP_ARROW      &kp RIGHT      &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans  &kp LG(LS(RIGHT_ARROW))  &trans  &trans      &trans  &trans              &trans          &trans            &trans         &kp RIGHT_SHIFT
&trans          &trans                  &trans  &trans                   &trans  &trans      &trans  &trans                                                               &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans    &trans    &trans    &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans    &trans    &trans    &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans    &trans    &trans    &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BLUETOOTH {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };
    };
};
